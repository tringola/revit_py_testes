{
  "Uuid": "78e7d45b-ba77-49ce-be83-0adb7d8bfd27",
  "IsCustomNode": false,
  "Description": "",
  "Name": "reload_family_and_parameters_v2",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\nimport sys\nimport clr\nimport os\nimport glob\nimport shutil\nimport json\nimport csv\n\n# Import ToDSType(bool) extension method\nclr.AddReference(\"RevitNodes\")\nimport Revit\nclr.ImportExtensions(Revit.Elements)\n\n# Import geometry conversion extension methods\nclr.ImportExtensions(Revit.GeometryConversion)\n\n# Import DocumentManager and TransactionManager\nclr.AddReference(\"RevitServices\")\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\n\n# Import RevitAPI\nclr.AddReference(\"RevitAPI\")\nimport Autodesk\nfrom Autodesk.Revit.DB import *\n\n# Imports Ilists module into python\nclr.AddReference(\"System\")\n\n# Standard areas for Current Document, Active UI and application\ndoc = DocumentManager.Instance.CurrentDBDocument\nuiapp = DocumentManager.Instance.CurrentUIApplication\napp = uiapp.Application\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\n\n# 1. Ajoutez un logging pour déboguer\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\ndef reload_family_from_file(family_file_path):\n    logging.debug(r\"Tentative de chargement de la famille : {family_file_path}\")\n    \n    if not family_file_path.lower().endswith('.rfa'):\n        logging.error(\"Le fichier n'est pas un fichier .rfa\")\n        return False\n        \n    t = Transaction(doc, 'Recharger Famille depuis fichier')\n    t.Start()\n    \n    try:\n        load_options = FamilyLoadOptions()\n        logging.debug(\"Options de chargement créées\")\n        \n        # Vérifier si le fichier existe\n        if not os.path.exists(family_file_path):\n            logging.error(r\"Le fichier n'existe pas : family_file_path\")\n            t.RollBack()\n            return False\n            \n        family = doc.LoadFamily(family_file_path, load_options)\n        logging.debug(r\"Résultat du chargement : {family}\")\n        \n        if family:\n            t.Commit()\n            logging.debug(\"Transaction validée avec succès\")\n            return True\n        else:\n            t.RollBack()\n            logging.error(\"Échec du chargement de la famille\")\n            return False\n            \n    except Exception as e:\n        t.RollBack()\n        logging.error(r\"Erreur lors du chargement : {str(e)}\")\n        return False\n\n# Implémentation de IFamilyLoadOptions pour gérer les paramètres\nclass FamilyLoadOptions(IFamilyLoadOptions):\n    def OnFamilyFound(self, familyInUse, overwriteParameterValues):\n        # Écraser tous les paramètres existants\n        overwriteParameterValues.Value = True\n        return True\n        \n    def OnSharedFamilyFound(self, sharedFamily, familyInUse, source, overwriteParameterValues):\n        # Écraser tous les paramètres existants pour les familles partagées aussi\n        overwriteParameterValues.Value = True\n        return True\n\n# Exemple d'utilisation\nfamily_file_path = \"F:\\\\document\\\\23o_desktop\\\\sauvegarde_G36\\\\catalogue_GA\\\\Equipements\\\\GA_Separateur_gravitaire.rfa\"  # Remplacer par le chemin de votre fichier\n\n# Exécution\nresult = reload_family_from_file(family_file_path)\nOUT = result",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "fb7de8bcf1ec4bda8be05840f3592dad",
      "Inputs": [
        {
          "Id": "0e1f5a6fbd2a4e55a494b0f0cfe07f33",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5610c6d8bed6414b90f5ba2f453869f4",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script Python intégré."
    }
  ],
  "Connectors": [],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.12",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "1.10",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "Aucun",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.12.1.8246",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Aperçu en arrière-plan",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "fb7de8bcf1ec4bda8be05840f3592dad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 532.5,
        "Y": 280.0
      }
    ],
    "Annotations": [],
    "X": 0.0,
    "Y": 0.0,
    "Zoom": 1.0
  }
}